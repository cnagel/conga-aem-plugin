/*
 * #%L
 * wcm.io
 * %%
 * Copyright (C) 2020 wcm.io
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package io.wcm.devops.conga.plugins.aem.maven;

import java.io.File;
import java.io.IOException;
import java.util.Set;

import org.apache.commons.io.FileUtils;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;

import com.google.common.collect.ImmutableSet;

/**
 * Copies the "all" content packages dedicated for deployment via Adobe Cloud Manager
 * generated by "aem-contentpackage" node model export plugin.
 */
@Mojo(name = "copy-all-packages", threadSafe = true, requiresProject = false)
public final class CopyAllPackagesMojo extends AbstractMojo {

  /**
   * Selected environments to generate.
   */
  @Parameter(property = "conga.environments")
  private String[] environments;

  /**
   * Selected nodes to generate.
   */
  @Parameter(property = "conga.nodes")
  private String[] nodes;

  /**
   * Path for the generated configuration files.
   */
  @Parameter(defaultValue = "${project.build.directory}/configuration")
  private File configurationDir;

  /**
   * Target path for the generated copied files.
   */
  @Parameter(defaultValue = "${project.build.directory}")
  private File target;

  /**
   * Set this to "true" to skip installing packages to CRX although configured in the POM.
   */
  @Parameter(property = "conga.copyAllPackages.skip", defaultValue = "false")
  private boolean skip;


  private static final String MODEL_FILE = "aem-all-packages.zip";

  @Override
  public void execute() throws MojoExecutionException, MojoFailureException {
    if (skip) {
      return;
    }

    try {
      Set<String> selectedEnvironments = toSet(this.environments);
      Set<String> selectedNodes = toSet(this.nodes);
      if (configurationDir.exists() && configurationDir.isDirectory()) {
        File[] files = configurationDir.listFiles();
        if (files != null) {
          for (File dir : files) {
            if (dir.isDirectory() && (selectedEnvironments.isEmpty() || selectedEnvironments.contains(dir.getName()))) {
              processEnvironment(dir, selectedNodes);
            }
          }
        }
      }
      else {
        getLog().warn("Configuration directory does not exist: " + configurationDir.getPath());
      }
    }
    catch (IOException ex) {
      throw new MojoExecutionException("Unable to copy files.", ex);
    }
  }

  private void processEnvironment(File environmentDir, Set<String> selectedNodes) throws IOException {
    File[] files = environmentDir.listFiles();
    if (files != null) {
      for (File dir : files) {
        if (dir.isDirectory() && (selectedNodes.isEmpty() || selectedNodes.contains(dir.getName()))) {
          processNode(environmentDir, dir);
        }
      }
    }
  }

  private void processNode(File environmentDir, File nodeDir) throws IOException {
    File allPackagesFile = new File(nodeDir, MODEL_FILE);
    if (allPackagesFile.exists() && allPackagesFile.isFile()) {
      File targetFile = new File(target, environmentDir.getName() + "-" + nodeDir.getName() + "-all.zip");
      FileUtils.copyFile(allPackagesFile, targetFile);
    }
  }

  private static Set<String> toSet(String[] values) {
    if (values != null) {
      return ImmutableSet.copyOf(values);
    }
    else {
      return ImmutableSet.of();
    }
  }

}
